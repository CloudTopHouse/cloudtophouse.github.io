(window.webpackJsonp=window.webpackJsonp||[]).push([[225],{995:function(e,t,a){"use strict";a.r(t);var l=a(28),r=Object(l.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h3",{attrs:{id:"thymeleaf-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thymeleaf-简介"}},[e._v("#")]),e._v(" Thymeleaf 简介")]),e._v(" "),a("h2",{attrs:{id:"什么是-thymeleaf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-thymeleaf"}},[e._v("#")]),e._v(" 什么是 Thymeleaf")]),e._v(" "),a("p",[e._v("Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代 JSP 。相较与其他的模板引擎，它有如下三个极吸引人的特点")]),e._v(" "),a("ul",[a("li",[e._v("Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板 + 数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。")]),e._v(" "),a("li",[e._v("Thymeleaf 开箱即用的特性。它提供标准和 Spring 标准两种方言，可以直接套用模板实现 JSTL、 OGNL 表达式效果，避免每天套模板、改 JSTL、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。")]),e._v(" "),a("li",[e._v("Thymeleaf 提供 Spring 标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。")])]),e._v(" "),a("h2",{attrs:{id:"为什么需要-thymeleaf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要-thymeleaf"}},[e._v("#")]),e._v(" 为什么需要 Thymeleaf")]),e._v(" "),a("p",[e._v("如果希望以 Jar 形式发布模块则尽量不要使用 JSP 相关知识，这是"),a("strong",[e._v("因为 JSP 在内嵌的 Servlet 容器上运行有一些问题 (内嵌 Tomcat、 Jetty 不支持 Jar 形式运行 JSP")]),e._v("，Undertow 不支持 JSP)。")]),e._v(" "),a("p",[e._v("Spring Boot 中推荐使用 Thymeleaf 作为模板引擎，因为 Thymeleaf 提供了完美的 Spring MVC 支持，Spring Boot 提供了大量模板引擎，包括：")]),e._v(" "),a("ul",[a("li",[e._v("FreeMarker")]),e._v(" "),a("li",[e._v("Groovy")]),e._v(" "),a("li",[e._v("Mustache")]),e._v(" "),a("li",[a("strong",[e._v("Thymeleaf")])]),e._v(" "),a("li",[e._v("Velocity")]),e._v(" "),a("li",[a("strong",[e._v("Beetl")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);